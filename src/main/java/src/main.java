/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package src;

import com.beust.jcommander.JCommander;
import com.beust.jcommander.Parameter;
import src.exceptions.InvalidGameDescriptionException;
import src.networking.BroadcastGames;
import src.networking.DiscoverGames;
import src.networking.Networking;

public class main {
    private static class CommandHost {
        @Parameter(names = {"-p", "-port"}, description = "Port to host the game from", required = false)
        private int port = 0;
        @Parameter(names = {"-g", "-game"}, description = "Path to the game to host", required = true)
        private String game;
        @Parameter(names = {"-a", "-ai"}, description = "Number of AI players to include", required = false)
        private int aiPlayers = 0;
    }

    private static class CommandJoin {
        @Parameter(names = {"-l", "-localPort"}, description = "Local port to use", required = false)
        private int localPort = 0;
        @Parameter(names = {"-a", "-address"}, description = "Address of the host", required = true)
        private String address;
        @Parameter(names = {"-p", "-port"}, description = "Port of the host", required = true)
        private int port;
    }

    public static void main(String[] args) throws InvalidGameDescriptionException {
        CommandHost host = new CommandHost();
        CommandJoin join = new CommandJoin();
        JCommander jc = JCommander.newBuilder()
                .addCommand("host", host)
                .addCommand("join", join)
                .build();
        jc.setProgramName(main.class.getName());
        //print the usage if no arguments supplied.
        if (args.length == 0) {
            jc.usage();
            System.exit(0);
        }
        jc.parse(args);
        if (jc.getParsedCommand().equals("host")) {
            Networking.hostGame(host.game, host.port);
        } else if (jc.getParsedCommand().equals("join")) {
            Networking.connectToGame(join.localPort, join.address, join.port);
        }

//        Scanner scanner = new Scanner(System.in);
//        System.out.println("Local Port to use?");
//        int localPort = scanner.nextInt();
//        System.out.println("Host or join?\nh(ost)\nj(oin)");
//        String mode = scanner.next();
//        switch (mode){
//            case "h":
//                Networking.hostGame(args[0], localPort);
//                break;
//            case "j":
//                System.out.println("IP of Host?");
//                String ip = scanner.next();
//                System.out.println("Port?");
//                int port = scanner.nextInt();
//                Networking.connectToGame(localPort, ip, port);
//                break;
//            default:
//                throw new IllegalArgumentException();
//        }


//        Parser parser = new Parser();
//        JSONObject GameJSON = Parser.readJSONFile(args[0]);
//        GameDesc gameDesc = parser.parseGameDescription(GameJSON);
////        System.out.println(gameDesc);
//
//        Player[] playerArray = {new LocalPlayer(0), new LocalPlayer(1), new LocalPlayer(2), new LocalPlayer(3)};
//        GameEngine.main(gameDesc, 0, playerArray);
    }
}
